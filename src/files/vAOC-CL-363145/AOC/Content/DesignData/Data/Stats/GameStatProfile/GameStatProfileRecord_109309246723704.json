{
	"maxHealthId":
	{
		"guid": "108986356618873",
		"typeId": "10516612381411111",
		"name": "Stat_MaxHealth"
	},
	"healthId":
	{
		"guid": "108986352686712",
		"typeId": "10516612381411111",
		"name": "Stat_Health"
	},
	"tempHealthId":
	{
		"guid": "6064629069966082048",
		"typeId": "10516612381411111",
		"name": "None"
	},
	"maxManaId":
	{
		"guid": "109183578756729",
		"typeId": "10516612381411111",
		"name": "Stat_MaxMana"
	},
	"manaId":
	{
		"guid": "109183576135288",
		"typeId": "10516612381411111",
		"name": "Stat_Mana"
	},
	"maxStaminaId":
	{
		"guid": "6064631747701440948",
		"typeId": "10516612381411111",
		"name": "None"
	},
	"staminaId":
	{
		"guid": "6064629575339934476",
		"typeId": "10516612381411111",
		"name": "None"
	},
	"powerId":
	{
		"guid": "109183598614138",
		"typeId": "10516612381411111",
		"name": "Stat_Power"
	},
	"dexterityId":
	{
		"guid": "109183598614139",
		"typeId": "10516612381411111",
		"name": "Stat_Dexterity"
	},
	"constitutionId":
	{
		"guid": "109183598614140",
		"typeId": "10516612381411111",
		"name": "Stat_Constitution"
	},
	"willId":
	{
		"guid": "109183598614141",
		"typeId": "10516612381411111",
		"name": "Stat_Will"
	},
	"wisdomId":
	{
		"guid": "109183598614142",
		"typeId": "10516612381411111",
		"name": "Stat_Wisdom"
	},
	"mentalityId":
	{
		"guid": "109183598614143",
		"typeId": "10516612381411111",
		"name": "None"
	},
	"luckId":
	{
		"guid": "6064631313380540561",
		"typeId": "10516612381411111",
		"name": "None"
	},
	"threatModifierId":
	{
		"guid": "109343236642446",
		"typeId": "10516612381411111",
		"name": "Stat_ThreatModifier"
	},
	"moveSpeedMultId":
	{
		"guid": "109228544644729",
		"typeId": "10516612381411111",
		"name": "Stat_MoveSpeedMult"
	},
	"gravityScaleId":
	{
		"guid": "6064631159508107288",
		"typeId": "10516612381411111",
		"name": "None"
	},
	"corruptionId":
	{
		"guid": "109228544644730",
		"typeId": "10516612381411111",
		"name": "Stat_Corruption"
	},
	"corruptionSoulburnId":
	{
		"guid": "6064630492098134016",
		"typeId": "10516612381411111",
		"name": "None"
	},
	"harvestSpeedModId":
	{
		"guid": "0",
		"typeId": "10516612381411111",
		"name": "MiningSpeedMod"
	},
	"healthRegenerationId":
	{
		"guid": "109315114489464",
		"typeId": "10516612381411111",
		"name": "None"
	},
	"physicalDamageBonusId":
	{
		"guid": "109183603267200",
		"typeId": "10516612381411111",
		"name": "Stat_PhysicalDamageBonus"
	},
	"physicalDisableChanceId":
	{
		"guid": "109183603267201",
		"typeId": "10516612381411111",
		"name": "Stat_PhysicalDisableChance"
	},
	"physicalDisableDefenseId":
	{
		"guid": "109183607068295",
		"typeId": "10516612381411111",
		"name": "Stat_PhysicalDisableDefense"
	},
	"physicalBlockChanceId":
	{
		"guid": "109183607068296",
		"typeId": "10516612381411111",
		"name": "Stat_PhysicalBlockChance"
	},
	"physicalAttackSpeedId":
	{
		"guid": "109343399171808",
		"typeId": "10516612381411111",
		"name": "None"
	},
	"magicalDamageBonusId":
	{
		"guid": "109183607068297",
		"typeId": "10516612381411111",
		"name": "Stat_MagicalDamageBonus"
	},
	"magicalDisableChanceId":
	{
		"guid": "109183607068298",
		"typeId": "10516612381411111",
		"name": "Stat_MagicalDisableChance"
	},
	"magicalCastingSpeedId":
	{
		"guid": "109343399106257",
		"typeId": "10516612381411111",
		"name": "Stat_MagicalCastingSpeed"
	},
	"magicalDisableDefenseId":
	{
		"guid": "109183607068302",
		"typeId": "10516612381411111",
		"name": "Stat_MagicalDisableDefense"
	},
	"manaRegenerationId":
	{
		"guid": "109183607133839",
		"typeId": "10516612381411111",
		"name": "Stat_ManaRegeneration"
	},
	"magicalBlockChanceId":
	{
		"guid": "109183607133841",
		"typeId": "10516612381411111",
		"name": "Stat_MagicalBlockChance"
	},
	"maxDurabilityId":
	{
		"guid": "6064629444242636800",
		"typeId": "10516612381411111",
		"name": "None"
	},
	"maxStackSizeMultTagsByStats":
	{
		"6064629665670889473":
		{
			"tagName": "Artisanship.Gathering"
		},
		"6064629665669775360":
		{
			"tagName": "Artisanship.Gathering.Lumberjacking"
		},
		"6064630214938853840":
		{
			"tagName": "Artisanship.Gathering.Mining"
		},
		"6064630214938788302":
		{
			"tagName": "Artisanship.Gathering.Herbalism"
		},
		"6064630214938853839":
		{
			"tagName": "Artisanship.Gathering.Hunting"
		},
		"6064630214938919377":
		{
			"tagName": "Artisanship.Gathering.Fishing"
		},
		"6064632140374278145":
		{
			"tagName": "Artisanship.Processing"
		}
	},
	"maxStackSizeAddTagsByStats":
	{
		"6064629658719223808":
		{
			"tagName": "Artisanship.Gathering"
		},
		"6064629658729185281":
		{
			"tagName": "Artisanship.Gathering.Lumberjacking"
		},
		"6064630214901039563":
		{
			"tagName": "Artisanship.Gathering.Mining"
		},
		"6064630214900974026":
		{
			"tagName": "Artisanship.Gathering.Herbalism"
		},
		"6064630214901105101":
		{
			"tagName": "Artisanship.Gathering.Hunting"
		},
		"6064630214901105100":
		{
			"tagName": "Artisanship.Gathering.Fishing"
		},
		"6064632140374081536":
		{
			"tagName": "Artisanship.Processing"
		}
	},
	"nativeDamageId":
	{
		"guid": "6064628753017929728",
		"typeId": "30316005",
		"name": "None"
	},
	"defaultMissRate":
	{
		"expression": "EvalFormula($#10516612381411113:6064629257369419776$)"
	},
	"defaultBlockRate":
	{
		"expression": "EvalFormula($#10516612381411113:6064629926397873035$)"
	},
	"defaultCritRate":
	{
		"expression": "EvalFormula($#10516612381411113:6064629248730988561$)"
	},
	"defaultEffectResistRate":
	{
		"expression": "EvalFormula($#10516612381411113:6064631862539321348$)"
	},
	"defaultThreatToTarget":
	{
		"expression": "EvalFormula($#10516612381411113:6064628769634779137$)"
	},
	"defaultObservedThreat":
	{
		"expression": "EvalFormula($#10516612381411113:6064628774789840896$)"
	},
	"defaultDurabilityLossModifier":
	{
		"expression": "EvalFormula($#10516612381411113:6064629455636856832$)"
	},
	"defaultMaxStackSizeMultiplier":
	{
		"expression": "EvalFormula($#10516612381411113:6064629659142651904$)"
	},
	"defaultMaxStackSizeAddition":
	{
		"expression": "EvalFormula($#10516612381411113:6064629665417658368$)"
	},
	"effectTagsToIgnoreOnBoss": [],
	"experienceDebt":
	{
		"expression": "// base xp debt\r\nvar mult = 0.02;\r\n\r\n// calculate ur corruption tier and crank up the mult based on that curve\r\nconst cTier = GetStat(GetPlayer(), $#10516612381411111:6064630485796716545$);\r\nset mult = mult * EvalCurve($#10516612381411114:6064630704890642574$,cTier);\r\n\r\n// potential reductions if ur not corrupt\r\nif (cTier <= 0.00001)\r\n{\r\n    // scale XP debt by this debtMult stat\r\n    set mult = mult * GetStat(GetPlayer(), $#10516612381411111:6064630609932255260$);\r\n\r\n    // if you're a combatant reduce XP debt by half\r\n    if(PlayerIsCombatant(GetPlayer()))\r\n    {\r\n        set mult = mult * 0.5;\r\n    }\r\n}\r\n\r\n// finally set your xp debt value based on a portion of current level\r\nmult * GetPlayerXPForCurrentLevel(GetPlayer())"
	},
	"experienceDebtCap":
	{
		"expression": "GetPlayerXPForCurrentLevel(GetPlayer())"
	},
	"corruptedDeathNumItemsToDrop":
	{
		"expression": "// for some reason this formula always returns 0????????????????????? HELPPPPP\r\n//EvalFormula($Formula:CorruptionDeathItemDrop$)\r\n\r\nconst tier = GetStat(GetInstigator(),$#10516612381411111:6064630485796716545$);\r\nconst min = Round(EvalCurve($#10516612381411114:6064632190841389056$,tier));\r\nconst max = Round(EvalCurve($#10516612381411114:6064632190842306561$,tier));\r\nfloat(RandIntRange(min,max))"
	},
	"deathPercentMaterialsToDrop":
	{
		"expression": "//EvalFormula($Formula:PlayerDeathMaterialDrop$)\r\nconst drop = GetStat(GetInstigator(), $#10516612381411111:6064632195659205501$);\r\nconst sink = GetStat(GetInstigator(), $#10516612381411111:6064632195676769150$);\r\n// max amount you can drop after you consider how much u should sink\r\n// this is mainly here in the case of high corruption your drop will be very high\r\n// and you wont sink as much as you should\r\nconst maxAfterSink = 1.0 - Clamp(sink, 0.0, 1.0);\r\nClamp(Min(drop,maxAfterSink), 0.0, 1.0)"
	},
	"deathPercentMaterialsToDelete":
	{
		"expression": "//EvalFormula($Formula:PlayerDeathMaterialSink$)\r\nconst sink = GetStat(GetInstigator(), $#10516612381411111:6064632195676769150$);\r\nClamp(sink, 0.0, 1.0)"
	},
	"corruptionAddedOnKill":
	{
		"expression": "var corruption = 0.0;\r\n\r\n// if ur killing an owned creature (like a horsey)\r\nvar CreatureOwner = GetCreatureOwner(GetTarget());\r\nif (IsValid(CreatureOwner))\r\n{\r\n  set corruption = 1.0;\r\n}\r\n\r\n// otherwise if ur a normal player character\r\nif (!IsValid(CreatureOwner))\r\n{\r\n  const PlayerLevel = GetCharacterLevel(GetSource());\r\n  const TargetLevel = GetCharacterLevel(GetTarget());\r\n  const Delta = PlayerLevel - TargetLevel;\r\n  // base 1 corruption per pk plus 0.2 per level you are greater than target\r\n  set corruption = 1 + Max(0, Delta) * 0.2;\r\n}\r\n\r\n// add extra corruption based on how much BLIGHT the instigator has\r\nconst blight = GetStat(GetInstigator(), $#10516612381411111:6064630492098134016$);\r\nset corruption = corruption + blight * 0.5;\r\ncorruption"
	},
	"corruptionReductionOnDeath":
	{
		"expression": "const corruption = GetStat(GetPlayer(), $#10516612381411111:109228544644730$);\r\n// lose a little more than half ur corruption on death and always at least 1\r\n// effectively, each time you die you go down 1 corruption level\r\nvar toReduce = Max(2.0, corruption * 0.5);\r\nif (corruption - toReduce < 1.0)\r\n{\r\n    set toReduce = corruption;\r\n}\r\ntoReduce"
	},
	"corruptionReductionOnKillNPC":
	{
		"expression": "const PlayerLevel = float(GetCharacterLevel(GetSource()));\r\nconst TargetLevel = float(GetCharacterLevel(GetTarget()));\r\n// mult based on the scaling xp reward of the mob based on level\r\nconst baseXpMult = EvalCurve($#10516612381411114:6064630639394422811$, TargetLevel)\r\n/ EvalCurve($#10516612381411114:6064630639394422811$, PlayerLevel);\r\n// mult based on the difference between ur level and mob level\r\nconst levelDeltaMult = EvalCurve($#10516612381411114:6064632543980093492$, TargetLevel-PlayerLevel);\r\n// on avg how many regular mobs it should take to reduce a point of corruption\r\nconst avgKillsPerRedux = 40.0;\r\n// the base reward mult of killing a mob (factors in health and elite rank and such)\r\nconst baseRewardMult = EvalFormula($#10516612381411113:6064632140998705169$);\r\n// clamp just incase u get the kill on firebrand or something lol\r\n// until we can do this not based on killing blow but actual xp gained with potential party split\r\n- Clamp(baseRewardMult * baseXpMult * levelDeltaMult / avgKillsPerRedux, 0.0, 1.0)"
	},
	"stealthDetection":
	{
		"expression": "EvalFormula($#10516612381411113:6064632949331530565$) > 0.0"
	},
	"stealthReveal":
	{
		"expression": "EvalFormula($#10516612381411113:6064632949333037895$) > 0.0"
	},
	"stealthActivation":
	{
		"expression": "// if youre out of LOS you can activate\r\nconst StealthProximity = GetStealthProximityState(GetSelf());\r\nvar canActivate = StealthProximity != EStealthProximityState::InProximityInView;\r\n\r\n// want to do this so you can stealth if you are hidden or detected to all people in range\r\n// but something changed with this expression and it no longer functions like the tooltip says\r\n//const Perception = GetStealthPerceptionState(GetTarget(), GetSource());\r\n//Perception == EStealthPerceptionState::Detected ||\r\n//Perception == EStealthPerceptionState::Hidden ||\r\n\r\nif(GetEffectCount(GetInstigator(), $#30316002:6064632785479143744$) > 0 ||\r\n   GetEffectCount(GetInstigator(), $#30316002:6064632711256473912$) > 0){\r\n    set canActivate = true;\r\n}\r\n\r\nif(IsServer()){\r\n    // trying to add some server side leniency to the check\r\n    // but the below expression always returns zero...\r\n    //set canActivate = canActivate || GetDistanceBetween(GetOwner(),GetTarget()) > 500.0;\r\n    set canActivate = true;\r\n}\r\ncanActivate"
	},
	"stealthRadius": 1500,
	"hiddenFXId":
	{
		"guid": "6064633214509187565",
		"typeId": "30316008",
		"name": "None"
	},
	"detectedFXId":
	{
		"guid": "6064633214512923118",
		"typeId": "30316008",
		"name": "None"
	},
	"revealedFXId":
	{
		"guid": "6064633214513250799",
		"typeId": "30316008",
		"name": "None"
	},
	"observedFXId":
	{
		"guid": "6064633214514102768",
		"typeId": "30316008",
		"name": "None"
	},
	"stealthDetectionIndicatorDuration": 0.5,
	"cargoLootPercentFormula":
	{
		"expression": "GetStat(GetPlayer(), $#10516612381411111:6064630680113971204$)"
	},
	"crackDurabilityLossFormula":
	{
		"expression": "-GetStat(GetInteractionTarget(), $#10516612381411111:6064630680011341827$)"
	},
	"fallDamageFormula":
	{
		"expression": "EvalFormula($#10516612381411113:6064633786148716544$)"
	},
	"guid": "109309246723704",
	"name": "GameStatProfile",
	"typeId": "9998877000"
}